package ${package.Controller};

import com.chengqian.module.frame.config.ResultData;
import com.chengqian.module.frame.config.ResultViewModel;
import com.chengqian.module.frame.entity.PageParam;
import com.chengqian.module.frame.utils.PageUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};

#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
@Api(value = "$!{table.comment}",tags = "$!{table.comment}")
@Slf4j
public class ${table.controllerName} {
#end

    @Autowired
    ${table.serviceName} i${table.serviceName};

    private final String messageBlock="$!{table.comment}";

    @PostMapping("/listPage")
    //@RequiresPermissions("${table.name}:${entity}:listPage")
    @ApiOperation(value = "查询" + messageBlock, notes = "POST", httpMethod = "POST")
    public ResultViewModel listPage(@RequestParam PageParam<${entity}> params){
        PageUtils page=i${table.serviceName}.queryPage(params);

        return ResultData.success(page);
    }
    
    /**
     * 列表
     */
    @GetMapping("/list")
    //@RequiresPermissions("${table.name}:${entity}:list")
    @ApiOperation(value = "查询列表" + messageBlock, notes = "GET", httpMethod = "GET")
    public List<${entity}> list(){
        List<${entity}> ret=i${table.serviceName}.list(null);

        return ret;
    }
    
    /**
     * 信息
     */
    @GetMapping("/info/{id}")
    //@RequiresPermissions("${table.name}:${entity}:info")
    @ApiOperation(value = "查询详情" + messageBlock, notes = "GET", httpMethod = "GET")
    public ResultViewModel info(@PathVariable("id") Long id){
        ${entity} ent=i${table.serviceName}.getById(id);

        return ResultData.success(ent);
    }
    
    /**
     * 新增
     */
    //@SysLog(messageBlock + "新增")
    @PostMapping("/add")
    //@RequiresPermissions("${table.name}:${entity}:add")
    @ApiOperation(value = "新增" + messageBlock, notes = "POST", httpMethod = "POST")
    public ResultViewModel add(@RequestBody ${entity} ent){
        String me="新增" + messageBlock;
            //long id = getMaxID()+1;
            //ent.setUnitId(unitService.getMaxId()+1);
        i${table.serviceName}.save(ent);
    
        return  ResultData.successNoData(me);
    }
    
    /**
     * 修改
     */
    //@SysLog(messageBlock + "修改")
    @PostMapping("/edit")
    //@RequiresPermissions("${table.name}:${entity}:edit")
    @ApiOperation(value = "修改" + messageBlock, notes = "POST", httpMethod = "POST")
    public ResultViewModel edit(@RequestBody ${entity} ent){
        String me="修改" + messageBlock;
            //ValidatorUtils.validateEntity(ent);
        i${table.serviceName}.updateById(ent);
        return ResultData.successNoData(me);
    }
    
    /**
     * 删除
     */
    //@SysLog(messageBlock + "删除")
    @PostMapping("/delete")
    //@RequiresPermissions("${table.name}:${entity}:delete")
    @ApiOperation(value = "删除" + messageBlock, notes = "POST", httpMethod = "POST")
    public ResultViewModel delete(@RequestBody Long...ids){
        String me="删除" + messageBlock;
        i${table.serviceName}.removeByIds(Arrays.asList(ids));
    
        return ResultData.successNoData(me);
    }
}

#end